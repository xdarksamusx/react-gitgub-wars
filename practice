import React, { useReducer } from "react";
import "./styles.css";
import axios from "axios";

class App extends React.Component {
  findKeyValue = (list, maxValue) => {
    const winner = list.find((element) => element.score === maxValue);

    return winner ? winner.name : null;
  };

  compareValues = (a, b) => {
    // Compare values
    if (a.score < b.score) {
      return -1;
    } else if (a.score > b.score) {
      return 1;
    } else {
      return 0;
    }
  };

  state = {
    searchTerm: "",
    hasError: false,
    isLoading: false,
    user: "",
    list: [],
    winningName: ""
  };

  getScore = (list) => {
    const scoresArray = list.map((object) => {
      return parseInt(object.score);
    });
    const maxScore = scoresArray.reduce((a, b) => Math.max(a, b), -Infinity);

    return maxScore;
  };

  getPokemon = async (user) => {
    try {
      this.setState({ isLoading: true });
      const response = await axios(`https://api.github.com/users/${user}`);
      const { data } = response;
  
      const modifiedData = {
        ...data,
        score: data.public_gists + data.public_repos
      };
      console.log("Modified Data:", modifiedData);
  
      this.setState({ user: modifiedData, isLoading: false });
      const topCompany = getScore(modifiedData);
    } catch (error) {
      console.error("Error:", error);
    }
  };
  

  handleChange = (e) => {
    this.setState({ searchTerm: e.target.value });
  };

  handleSubmit = async (e) => {
    e.preventDefault();

    try {
      const input = this.state.searchTerm.toLowerCase().trim();
      this.setState({ searchTerm: "" });
      const nameArray = this.state.list.map(element => element.name.toLowerCase());
      console.log("Input:", input);
      console.log("Name Array:", nameArray);
    
      if (nameArray.includes(input)) {
        console.log("Duplicate found");
        return;
      } else {
        console.log("No duplicate found");
        await this.getPokemon(input);
    
        this.setState((prevState) => {
          const updatedList = [...prevState.list, prevState.user];
          console.log("Updated List:", updatedList);
    
          const sortedList = updatedList.sort(this.compareValues);
          const maxScore = this.getScore(sortedList);
          const findWinner = this.findKeyValue(sortedList, maxScore);
    
          return { list: sortedList, winningName: findWinner };
        });
      }
    } catch (error) {
      console.error("Error:", error);
    }
    
  };
  ///////////////////////////////////

  render() {
    const {
      searchTerm,
      hasError,
      isLoading,
      user,
      list,
      winningName
    } = this.state;
    const hasPokemon = !isLoading && user;

    return (
      <div className="App">
        <form onSubmit={this.handleSubmit}>
          <input onChange={this.handleChange} value={this.state.searchTerm} />
        </form>

        {isLoading && <div>Loading</div>}
        {hasPokemon && (
          <ul className="flex">
            {" "}
            {list.map((item) => (
              <li>
                {" "}
                <ul>
                  {" "}
                  {item.name}
                  {item.name === winningName ? <h2>WInner</h2> : ""}
                  <li>
                    {" "}
                    <img className="size" src={item.avatar_url} />
                  </li>
                  <li> repos: {item.public_repos} </li>
                  <li> followers: {item.followers} </li>
                  <li> public gists:{item.public_gists} </li>
                  <li>
                    {" "}
                    score:{" "}
                    {parseInt(item.public_gists) +
                      parseInt(item.public_repos)}{" "}
                  </li>
                </ul>
              </li>
            ))}
          </ul>
        )}
      </div>
    );
  }
}

export default App;
